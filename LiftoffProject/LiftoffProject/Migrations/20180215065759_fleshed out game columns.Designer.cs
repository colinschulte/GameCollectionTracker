// <auto-generated />
using LiftoffProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace LiftoffProject.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20180215065759_fleshed out game columns")]
    partial class fleshedoutgamecolumns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LiftoffProject.Models.AlternativeName", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment");

                    b.Property<int?>("GameLocalId");

                    b.Property<string>("Name");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("AlternativeName");
                });

            modelBuilder.Entity("LiftoffProject.Models.Collection", b =>
                {
                    b.Property<int>("LocalId");

                    b.Property<int>("CreatedAt");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<int>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.ToTable("Collection");
                });

            modelBuilder.Entity("LiftoffProject.Models.Franchise", b =>
                {
                    b.Property<int>("LocalId");

                    b.Property<int>("CreatedAt");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<int>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.ToTable("Franchise");
                });

            modelBuilder.Entity("LiftoffProject.Models.Game", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<float>("AggregatedRating");

                    b.Property<int>("AggregatedRatingCount");

                    b.Property<int>("Category");

                    b.Property<int>("CreatedAt");

                    b.Property<int>("FirstReleaseDate");

                    b.Property<int?>("GameGameLocalId");

                    b.Property<int>("Hypes");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<float>("Popularity");

                    b.Property<int>("PulseCount");

                    b.Property<float>("Rating");

                    b.Property<int>("RatingCount");

                    b.Property<string>("Slug");

                    b.Property<int>("Status");

                    b.Property<string>("Storyline");

                    b.Property<string>("Summary");

                    b.Property<float>("TotalRating");

                    b.Property<int>("TotalRatingCount");

                    b.Property<int>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.HasIndex("GameGameLocalId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("LiftoffProject.Models.GameMode", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedAt");

                    b.Property<int?>("GameLocalId");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<int>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("GameMode");
                });

            modelBuilder.Entity("LiftoffProject.Models.Genre", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedAt");

                    b.Property<int?>("GameLocalId");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<int>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("Genre");
                });

            modelBuilder.Entity("LiftoffProject.Models.Image", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CloudinaryId");

                    b.Property<int?>("GameLocalId");

                    b.Property<int?>("GameLocalId1");

                    b.Property<string>("Height");

                    b.Property<string>("Url");

                    b.Property<int>("Width");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId")
                        .IsUnique()
                        .HasFilter("[GameLocalId] IS NOT NULL");

                    b.HasIndex("GameLocalId1");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("LiftoffProject.Models.Keyword", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedAt");

                    b.Property<int?>("GameLocalId");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<int>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("Keyword");
                });

            modelBuilder.Entity("LiftoffProject.Models.PlayerPerspective", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedAt");

                    b.Property<int?>("GameLocalId");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<int>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("PlayerPerspective");
                });

            modelBuilder.Entity("LiftoffProject.Models.Rating", b =>
                {
                    b.Property<int>("LocalId");

                    b.Property<int?>("GameLocalId");

                    b.Property<int>("RatingInt");

                    b.Property<string>("Synopsis");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId")
                        .IsUnique()
                        .HasFilter("[GameLocalId] IS NOT NULL");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("LiftoffProject.Models.ReleaseDate", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<int>("CreatedAt");

                    b.Property<int>("Date");

                    b.Property<int?>("GameLocalId");

                    b.Property<string>("Human");

                    b.Property<int>("Id");

                    b.Property<int>("Month");

                    b.Property<string>("Name");

                    b.Property<int>("Platform");

                    b.Property<int>("Region");

                    b.Property<int>("UpdatedAt");

                    b.Property<int>("Year");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("ReleaseDate");
                });

            modelBuilder.Entity("LiftoffProject.Models.Theme", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CreatedAt");

                    b.Property<int?>("GameLocalId");

                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<string>("Slug");

                    b.Property<int>("UpdatedAt");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("Theme");
                });

            modelBuilder.Entity("LiftoffProject.Models.TimeToBeat", b =>
                {
                    b.Property<int>("LocalId");

                    b.Property<int>("Completely");

                    b.Property<int>("Hastly");

                    b.Property<int>("Normally");

                    b.HasKey("LocalId");

                    b.ToTable("TimeToBeat");
                });

            modelBuilder.Entity("LiftoffProject.Models.Video", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("GameLocalId");

                    b.Property<string>("Name");

                    b.Property<string>("VideoId");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("LiftoffProject.Models.Website", b =>
                {
                    b.Property<int>("LocalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Category");

                    b.Property<int?>("GameLocalId");

                    b.Property<string>("Url");

                    b.HasKey("LocalId");

                    b.HasIndex("GameLocalId");

                    b.ToTable("Website");
                });

            modelBuilder.Entity("LiftoffProject.Models.AlternativeName", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("AlternativeNames")
                        .HasForeignKey("GameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.Collection", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithOne("Collection")
                        .HasForeignKey("LiftoffProject.Models.Collection", "LocalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiftoffProject.Models.Franchise", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithOne("Franchise")
                        .HasForeignKey("LiftoffProject.Models.Franchise", "LocalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiftoffProject.Models.Game", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", "GameGame")
                        .WithMany()
                        .HasForeignKey("GameGameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.GameMode", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("GameModes")
                        .HasForeignKey("GameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.Genre", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("Genres")
                        .HasForeignKey("GameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.Image", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithOne("Cover")
                        .HasForeignKey("LiftoffProject.Models.Image", "GameLocalId");

                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("Screenshots")
                        .HasForeignKey("GameLocalId1");
                });

            modelBuilder.Entity("LiftoffProject.Models.Keyword", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("Keywords")
                        .HasForeignKey("GameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.PlayerPerspective", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("PlayerPerspectives")
                        .HasForeignKey("GameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.Rating", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithOne("Pegi")
                        .HasForeignKey("LiftoffProject.Models.Rating", "GameLocalId");

                    b.HasOne("LiftoffProject.Models.Game")
                        .WithOne("Esrb")
                        .HasForeignKey("LiftoffProject.Models.Rating", "LocalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiftoffProject.Models.ReleaseDate", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("ReleaseDates")
                        .HasForeignKey("GameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.Theme", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("Themes")
                        .HasForeignKey("GameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.TimeToBeat", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithOne("TimeToBeat")
                        .HasForeignKey("LiftoffProject.Models.TimeToBeat", "LocalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("LiftoffProject.Models.Video", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("Videos")
                        .HasForeignKey("GameLocalId");
                });

            modelBuilder.Entity("LiftoffProject.Models.Website", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game")
                        .WithMany("Websites")
                        .HasForeignKey("GameLocalId");
                });
#pragma warning restore 612, 618
        }
    }
}
