// <auto-generated />
using System;
using LiftoffProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LiftoffProject.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20200317185326_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LiftoffProject.Models.AlternativeName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("AlternativeName");
                });

            modelBuilder.Entity("LiftoffProject.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("AggregatedRating")
                        .HasColumnType("real");

                    b.Property<int>("AggregatedRatingCount")
                        .HasColumnType("int");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<int>("CollectionId")
                        .HasColumnType("int");

                    b.Property<int>("CoverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FirstReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FirstReleaseDateUTC")
                        .HasColumnType("int");

                    b.Property<int>("Follows")
                        .HasColumnType("int");

                    b.Property<long>("Franchise")
                        .HasColumnType("bigint");

                    b.Property<int>("Hypes")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ParentGameId")
                        .HasColumnType("int");

                    b.Property<double>("Popularity")
                        .HasColumnType("float");

                    b.Property<int>("PulseCount")
                        .HasColumnType("int");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("RatingCount")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Storyline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TimeToBeatId")
                        .HasColumnType("int");

                    b.Property<float>("TotalRating")
                        .HasColumnType("real");

                    b.Property<int>("TotalRatingCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedAtUTC")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VersionParentId")
                        .HasColumnType("int");

                    b.Property<string>("VersionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("LiftoffProject.Models.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedAtUTC")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("LiftoffProject.Models.GenreGameId", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("GenreGameIds");
                });

            modelBuilder.Entity("LiftoffProject.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Game")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ImageId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("Covers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Image");
                });

            modelBuilder.Entity("LiftoffProject.Models.ReleaseDate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Date")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Human")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Platform")
                        .HasColumnType("int");

                    b.Property<int>("Region")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UpdatedAtUTC")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("ReleaseDates");
                });

            modelBuilder.Entity("LiftoffProject.Models.ReleaseGameId", b =>
                {
                    b.Property<int>("ReleaseDateId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("ReleaseDateId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("ReleaseGameIds");
                });

            modelBuilder.Entity("LiftoffProject.Models.ScreenshotGameId", b =>
                {
                    b.Property<int>("ScreenshotId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("ScreenshotId", "GameId");

                    b.HasIndex("GameId");

                    b.ToTable("ScreenshotGameIds");
                });

            modelBuilder.Entity("LiftoffProject.Models.Screenshot", b =>
                {
                    b.HasBaseType("LiftoffProject.Models.Image");

                    b.Property<int?>("GameId1")
                        .HasColumnType("int");

                    b.HasIndex("GameId1");

                    b.HasDiscriminator().HasValue("Screenshot");
                });

            modelBuilder.Entity("LiftoffProject.Models.AlternativeName", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", null)
                        .WithMany("AlternativeNames")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("LiftoffProject.Models.Genre", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", null)
                        .WithMany("Genres")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("LiftoffProject.Models.GenreGameId", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", "Game")
                        .WithMany("GenreGameIds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftoffProject.Models.Genre", "Genre")
                        .WithMany("GenreGameIds")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiftoffProject.Models.Image", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", null)
                        .WithMany("Artworks")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("LiftoffProject.Models.ReleaseDate", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", null)
                        .WithMany("ReleaseDates")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiftoffProject.Models.ReleaseGameId", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", "Game")
                        .WithMany("ReleaseGameIds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftoffProject.Models.ReleaseDate", "ReleaseDate")
                        .WithMany("ReleaseGameIds")
                        .HasForeignKey("ReleaseDateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiftoffProject.Models.ScreenshotGameId", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", "Game")
                        .WithMany("ScreenshotGameIds")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LiftoffProject.Models.Screenshot", "Screenshot")
                        .WithMany("ScreenshotGameIds")
                        .HasForeignKey("ScreenshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LiftoffProject.Models.Screenshot", b =>
                {
                    b.HasOne("LiftoffProject.Models.Game", null)
                        .WithMany("Screenshots")
                        .HasForeignKey("GameId1");
                });
#pragma warning restore 612, 618
        }
    }
}
